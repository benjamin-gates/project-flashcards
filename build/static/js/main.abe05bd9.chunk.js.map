{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/Home.js","Layout/CardList.js","Layout/EditDeck.js","Layout/CardForm.js","Layout/AddCard.js","Layout/Study.js","Layout/EditCard.js","Layout/Deck.js","Layout/CreateDeck.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","cardId","updatedCard","append","Home","history","useHistory","useState","decks","setDecks","length","setLength","useEffect","listDecks","then","handleDelete","window","confirm","homeBody","map","class","width","style","marginTop","description","display","justifyContent","type","marginRight","onClick","push","CardList","setNewCards","useRouteMatch","deleteCard","index","marginBottom","fontWeight","front","back","EditDeck","setNewDeck","useParams","initialState","formData","setFormData","handleChange","event","target","value","aria-label","exact","to","aria-current","onSubmit","preventDefault","updateDeck","result","htmlFor","size","onChange","cols","rows","CardForm","handleSubmit","AddCard","newCards","undefined","newDeck","createCard","Study","setFront","setCard","handleFlip","EditCard","readCard","updateCard","Deck","setDeck","setCards","path","CreateDeck","message","createDeck","Layout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abe05bd9.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { listDecks, deleteDeck } from \"../utils/api\";\r\n\r\nfunction Home() {\r\n  const history = useHistory();\r\n  const [decks, setDecks] = useState([]);\r\n  const [length, setLength] = useState(0);\r\n\r\n  // The list of decks are loaded each time the state \"length\" changes\r\n  useEffect(() => {\r\n    listDecks().then(setDecks);\r\n  }, [length]);\r\n\r\n  // When delete button is clicked, the deck will be deleted upon confirmation from user\r\n  const handleDelete = async (id) => {\r\n    const confirmation = window.confirm(\r\n      \"Delete this deck? You will not be able to recover it.\"\r\n    );\r\n    if (confirmation) {\r\n      await deleteDeck(id);\r\n      setLength(decks.length);\r\n    }\r\n  };\r\n\r\n  // Mapping deck content with buttons for the main body of the Home component\r\n  const homeBody = decks.map((deck) => (\r\n    <div key={deck.id} class=\"card border border-secondary\" width=\"18 rem\" style={{marginTop:\"20px\"}}>\r\n      <div class=\"card-body\">\r\n      <h2 class=\"card-title\">{deck.name}</h2>\r\n      <p class=\"card-text\">{deck.description}</p>\r\n\r\n      <div style={{display:\"flex\", justifyContent: \"space-between\"}}>\r\n      <h4 class=\"card-text\">{deck.cards.length} cards</h4>\r\n      <div>\r\n      <button type=\"delete\" style={{marginRight: \"10px\"}} class=\"btn btn-danger\" onClick={() => handleDelete(deck.id)}>\r\n        Delete\r\n      </button>\r\n      <button type=\"button\" class=\"btn btn-info\" onClick={() => history.push(`/decks/${deck.id}`)}>\r\n        View\r\n      </button>\r\n      </div>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  return decks ? (\r\n    <div>\r\n      <button type=\"button\" class=\"btn btn-primary\" onClick={() => history.push(`/decks/new`)}>\r\n        Create Deck\r\n      </button>\r\n      {homeBody}\r\n    </div>\r\n  ) : (\r\n    <p>Loading...</p>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport {useHistory, useRouteMatch} from \"react-router-dom\";\r\nimport {deleteCard} from \"../utils/api\";\r\n\r\nfunction CardList({cards, setNewCards}){\r\n    const {url} = useRouteMatch();\r\n    const history = useHistory();\r\n\r\n    // Delete handler for Card. \r\n    function handleDelete(cardId) {\r\n        if(window.confirm(`Delete this card? You will not be able to recover it`))   \r\n        {deleteCard(cardId)\r\n            .then(() => setNewCards(cards.map((card) => card.id===cardId ? null : card)))}\r\n    }\r\n    \r\n    // Mapping each card into its own card\r\n    if(cards) {\r\n        const cardList = cards.map((card, index) => (\r\n            <div key={index} class=\"card border border-secondary\" style={{marginBottom: \"15px\"}}>\r\n                <div class=\"card-body\">\r\n                    <div style={{display:\"flex\"}}>\r\n                <p class=\"card-text\" style={{fontWeight: \"bold\", marginRight:\"10px\"}}>Front:</p>\r\n                <p class=\"card-text\">{card.front}</p>\r\n                </div>\r\n                <div style={{display:\"flex\"}}>\r\n                <p class=\"card-text\" style={{fontWeight: \"bold\", marginRight:\"10px\"}}>Back:</p>  \r\n                <p class=\"card-text\">{card.back}</p>\r\n                </div>\r\n                <div style={{display: \"flex\", justifyContent:\"flex-end\"}}>\r\n                <button type=\"button\" class=\"btn btn-secondary\" style={{marginRight: \"10px\"}} onClick={() => history.push(`${url}/cards/${card.id}/edit`)}>Edit</button>\r\n                <button type=\"delete\" class=\"btn btn-danger\" onClick={() => handleDelete(card.id)}>Delete</button>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        ));\r\n        return cardList\r\n    }\r\n    else return <p>Loading...</p>\r\n\r\n}\r\n\r\nexport default CardList;","import React, { useState } from \"react\";\r\nimport { NavLink, useHistory, useParams } from \"react-router-dom\";\r\nimport { updateDeck } from \"../utils/api\";\r\n\r\nfunction EditDeck({ deck, setNewDeck }) {\r\n  const { deckId } = useParams();\r\n\r\n  // Sets initial formData to the Deck name and description passed from Deck\r\n  const initialState = {\r\n    name: deck.name,\r\n    description: deck.description,\r\n  };\r\n  const [formData, setFormData] = useState(initialState);\r\n\r\n  const handleChange = (event) => {\r\n    setFormData({\r\n      ...formData,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const history = useHistory();\r\n\r\n  // Updates the deck with information entered into form, then takes user to Deck screen upon Submit\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    updateDeck({\r\n      id: deckId,\r\n      name: formData.name,\r\n      description: formData.description,\r\n    })\r\n      .then((result) => setNewDeck(result))\r\n      .then(() => history.push(`/decks/${deckId}`));\r\n  };\r\n\r\n  if (formData)\r\n    return (\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <NavLink exact to={`/`}>\r\n                Home\r\n              </NavLink>\r\n            </li>\r\n            <li class=\"breadcrumb-item\">\r\n              <NavLink exact to={`/decks/${deckId}`}>\r\n                {formData.name}\r\n              </NavLink>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Edit Deck\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <form onSubmit={handleSubmit}>\r\n          <label htmlFor=\"name\" style={{marginBottom:\"15px\"}}>\r\n            Deck Name:\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n\r\n              id=\"name\"\r\n              size=\"37\"\r\n              onChange={handleChange}\r\n              value={formData.name}\r\n            />\r\n          </label>\r\n          <br />\r\n          <label htmlFor=\"description\">\r\n            Description:\r\n            <textarea\r\n              name=\"description\"\r\n              id=\"description\"\r\n              cols=\"40\"\r\n              rows=\"3\"\r\n              onChange={handleChange}\r\n              value={formData.description}\r\n            />\r\n          </label>\r\n          <br />\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-secondary\"\r\n            style={{marginRight: \"10px\"}}\r\n            onClick={() => history.push(`/decks/${deckId}`)}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  else return <p>Loading...</p>;\r\n}\r\n\r\nexport default EditDeck;\r\n","import React from \"react\";\r\n\r\nfunction CardForm( {formData, handleChange, handleSubmit, deckId, history}){\r\n  // This component creates the form that will be shared between components AddCard and EditCard\r\n    return (\r\n<form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"front\" style={{fontWeight:\"bold\"}}>\r\n          Front\r\n          <br />\r\n          <textarea\r\n            name=\"front\"\r\n            id=\"front\"\r\n            rows=\"4\"\r\n            cols=\"50\"\r\n            onChange={handleChange}\r\n            value={formData.front}\r\n          />\r\n        </label>\r\n        <br />\r\n        <label htmlFor=\"back\" style={{fontWeight:\"bold\"}}>\r\n          Back\r\n          <br />\r\n          <textarea\r\n            name=\"back\"\r\n            id=\"back\"\r\n            rows=\"4\"\r\n            cols=\"50\"\r\n            onChange={handleChange}\r\n            value={formData.back}\r\n          />\r\n        </label>\r\n        <br />\r\n        <button type=\"button\" class=\"btn btn-secondary\" style={{marginRight:\"10px\"}} onClick={() => history.push(`/decks/${deckId}`)}>\r\n        Done\r\n        </button>\r\n        <button type=\"submit\" class=\"btn btn-primary\">Save</button>\r\n      </form>\r\n    )\r\n};\r\n\r\n      export default CardForm;","import React, { useEffect, useState } from \"react\";\r\nimport { NavLink, useHistory, useParams } from \"react-router-dom\";\r\nimport { createCard, readDeck } from \"../utils/api\";\r\nimport CardForm from \"./CardForm\";\r\n\r\nfunction AddCard({ deck, newCards, setNewCards }) {\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n  const [newDeck, setNewDeck] = useState(undefined);\r\n  setNewCards(0);\r\n\r\n  // Creating \"blank\" form state for AddCard\r\n  const initialState = {\r\n    front: \"\",\r\n    back: \"\",\r\n  };\r\n  const [formData, setFormData] = useState(initialState);\r\n\r\n  // The deck with matching deck ID is loaded to add a card\r\n  useEffect(() => {\r\n    readDeck(deckId).then((result) => setNewDeck(result));\r\n  }, [deckId]);\r\n\r\n  const handleChange = (event) => {\r\n    setFormData({\r\n      ...formData,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  // Form handler for that creates new card using createCard\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    createCard(deckId, formData)\r\n      .then(() => setNewCards(newCards + 1))\r\n      .then(() => setFormData(initialState));\r\n  };\r\n\r\n  if (newDeck)\r\n    return (\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <NavLink exact to={`/`}>\r\n                Home\r\n              </NavLink>\r\n            </li>\r\n            <li class=\"breadcrumb-item\">\r\n              <NavLink exact to={`/decks/${deckId}`}>\r\n                {newDeck.name}\r\n              </NavLink>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Add Card\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h2>{newDeck.name}: Add Card</h2>\r\n        <CardForm\r\n          formData={formData}\r\n          handleChange={handleChange}\r\n          handleSubmit={handleSubmit}\r\n          deckId={deckId}\r\n          history={history}\r\n        />\r\n      </div>\r\n    );\r\n  else return <p>Loading...</p>;\r\n}\r\n\r\nexport default AddCard;\r\n","import React, { useState } from \"react\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\n\r\nfunction Study({ deck, cards }) {\r\n  const [front, setFront] = useState(true);\r\n  const [card, setCard] = useState(0);\r\n  const history = useHistory();\r\n\r\n  // Toggles state of front when \"Flip\" is clicked\r\n  const handleFlip = () => {\r\n    setFront(!front);\r\n  };\r\n\r\n  // Toggles state of front and sets the card # to the next card when \"Next\" is clicked\r\n  const handleNext = () => {\r\n    setCard(card + 1);\r\n    setFront(!front);\r\n  };\r\n\r\n  // Restarts Study from the beginning upon confirmation from the user, else the user is taken back to the Home screen\r\n  function handleRestart() {\r\n    if (window.confirm(\"Restart Cards?\")) {\r\n      setFront(!front);\r\n      setCard(0);\r\n    } else history.push(`/`);\r\n  }\r\n\r\n  if (cards && deck)\r\n    return (\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <NavLink exact to={`/`}>\r\n                Home\r\n              </NavLink>\r\n            </li>\r\n            <li class=\"breadcrumb-item\">\r\n              <NavLink exact to={`/decks/${deck.id}`}>\r\n                {deck.name}\r\n              </NavLink>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Study\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1>{deck.name}</h1>\r\n        {cards.length < 3 ? (\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n            <h3 class=\"card-title\">Not enough cards</h3>\r\n            <p class=\"card-text\">\r\n              You need at least 3 cards to study. You currently have{\" \"}\r\n              {cards.length} cards in this deck.\r\n            </p>\r\n            <button\r\n              type=\"button\" class=\"btn btn-primary\"\r\n              onClick={() => history.push(`/decks/${deck.id}/cards/new`)}\r\n            >\r\n              Add Cards\r\n            </button>\r\n            </div>\r\n          </div>\r\n        ) : card === cards.length - 1 && !front ? (\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n            <h3 class=\"card-title\">\r\n              Card {card + 1} of {cards.length}\r\n            </h3>\r\n            <p class=\"card-text\">{cards[card].back}</p>\r\n            <br />\r\n            <button type=\"button\" class=\"btn btn-secondary\" onClick={handleFlip}>\r\n              Flip\r\n            </button>\r\n            <button type=\"next\" class=\"btn btn-info\" onClick={handleRestart}>\r\n              Restart\r\n            </button>\r\n            </div>\r\n          </div>\r\n        ) : front ? (\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n            <h3 class=\"card-title\">\r\n              Card {card + 1} of {cards.length}\r\n            </h3>\r\n            <p class=\"card-text\">{cards[card].front}</p>\r\n            <br />\r\n            <button type=\"button\" class=\"btn btn-secondary\" onClick={handleFlip}>\r\n              Flip\r\n            </button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n            <h3 class=\"card-title\">\r\n              Card {card + 1} of {cards.length}\r\n            </h3>\r\n            <p class=\"card-text\">{cards[card].back}</p>\r\n            <br />\r\n            <button type=\"button\" class=\"btn btn-secondary\" onClick={handleFlip}>\r\n              Flip\r\n            </button>\r\n            <button type=\"next\" class=\"btn btn-info\" onClick={handleNext}>\r\n              Next\r\n            </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  else return <p>Loading...</p>;\r\n}\r\n\r\nexport default Study;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { NavLink, useHistory, useParams } from \"react-router-dom\";\r\nimport { readCard, updateCard } from \"../utils/api\";\r\nimport CardForm from \"./CardForm\";\r\n\r\nfunction EditCard({ deck, cards, newCards, setNewCards }) {\r\n  const { deckId, cardId } = useParams();\r\n  const history = useHistory();\r\n  const [formData, setFormData] = useState(undefined);\r\n\r\n  setNewCards(0);\r\n\r\n  // The card that we are editing is loaded, setting the initial state of the form\r\n  useEffect(() => {\r\n    readCard(cardId).then((result) =>\r\n      setFormData({\r\n        id: cardId,\r\n        front: result.front,\r\n        back: result.back,\r\n        deckId: Number(deckId),\r\n      })\r\n    );\r\n  }, [cardId, deckId]);\r\n\r\n  const handleChange = (event) => {\r\n    setFormData({\r\n      ...formData,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  // Upon submit, this handler changes state for newCards in the Deck component to trigger useEffect, then the path is pushed to Deck\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    updateCard(formData)\r\n      .then(() => setNewCards(newCards + 1))\r\n      .then(() => history.push(`/decks/${deckId}`));\r\n  };\r\n\r\n  if (deck && formData)\r\n    return (\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <NavLink exact to={`/`}>\r\n                Home\r\n              </NavLink>\r\n            </li>\r\n            <li class=\"breadcrumb-item\">\r\n              <NavLink exact to={`/decks/${deckId}`}>\r\n                {deck.name}\r\n              </NavLink>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Edit Card {cardId}\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <h1>Edit Card</h1>\r\n        <CardForm\r\n          formData={formData}\r\n          handleChange={handleChange}\r\n          handleSubmit={handleSubmit}\r\n          deckId={deckId}\r\n          history={history}\r\n        />\r\n      </div>\r\n    );\r\n  else return <p>Loading...</p>;\r\n}\r\n\r\nexport default EditCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  useParams,\r\n  NavLink,\r\n  useHistory,\r\n  useRouteMatch,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport { readDeck, deleteDeck } from \"../utils/api\";\r\nimport CardList from \"./CardList\";\r\nimport EditDeck from \"./EditDeck\";\r\nimport AddCard from \"./AddCard\";\r\nimport Study from \"./Study\";\r\nimport EditCard from \"./EditCard\";\r\n\r\nfunction Deck() {\r\n  const { url } = useRouteMatch();\r\n  const history = useHistory();\r\n  const { deckId } = useParams();\r\n  const [deck, setDeck] = useState(undefined);\r\n  const [cards, setCards] = useState(undefined);\r\n  const [newDeck, setNewDeck] = useState(undefined);\r\n  const [newCards, setNewCards] = useState(cards);\r\n\r\n  // Triggers readDeck each time the state of newDeck, newCards or deck Id changes\r\n  useEffect(() => {\r\n    readDeck(deckId).then(setDeck);\r\n  }, [newDeck, newCards, deckId]);\r\n\r\n  // Deletes deck upon confirmation from user\r\n  const handleDelete = () => {\r\n    if (\r\n      window.confirm(\r\n        `Delete deck? You will not be able to recover it after it is deleted`\r\n      )\r\n    ) {\r\n      deleteDeck(deckId).then(() => history.push(`/`));\r\n    }\r\n  };\r\n\r\n  return deck ? (\r\n    <Switch>\r\n      <Route path=\"/decks/:deckId/cards/:cardId/edit\">\r\n        <EditCard\r\n          deck={deck}\r\n          setCards={setCards}\r\n          cards={deck.cards}\r\n          newCards={newCards}\r\n          setNewCards={setNewCards}\r\n        />\r\n      </Route>\r\n      <Route path=\"/decks/:deckId/cards/new\">\r\n        <AddCard\r\n          deck={deck}\r\n          setDeck={setDeck}\r\n          setCards={setCards}\r\n          cards={deck.cards}\r\n          newDeck={newDeck}\r\n          setNewDeck={setNewDeck}\r\n          newCards={newCards}\r\n          setNewCards={setNewCards}\r\n        />\r\n      </Route>\r\n      <Route path={`/decks/:deckId/edit`}>\r\n        <EditDeck deck={deck} setDeck={setDeck} setNewDeck={setNewDeck} />\r\n      </Route>\r\n      <Route path=\"/decks/:deckId/study\">\r\n        <Study deck={deck} cards={deck.cards} />\r\n      </Route>\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">\r\n              <NavLink exact to={`/`}>\r\n                Home\r\n              </NavLink>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              {deck.name}\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n        <div>\r\n          <h3>{deck.name}</h3>\r\n          <p>{deck.description}</p>\r\n          <div style={{display: \"flex\", justifyContent:\"space-between\"}}>\r\n            <div>\r\n          <button type=\"button\" class=\"btn btn-secondary\" onClick={() => history.push(`${url}/edit`)}>\r\n            Edit\r\n          </button>\r\n          <button type=\"button\" class=\"btn btn-info\" onClick={() => history.push(`${url}/study`)}>\r\n            Study\r\n          </button>\r\n          <button\r\n            type=\"button\" class=\"btn btn-primary\"\r\n            onClick={() => history.push(`${url}/cards/new`)}\r\n          >\r\n            Add Cards\r\n          </button>\r\n          </div>\r\n          <div>\r\n          <button type=\"delete\" class=\"btn btn-danger\" onClick={handleDelete}>\r\n            Delete\r\n          </button>\r\n          </div>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <CardList\r\n            cards={deck.cards}\r\n            deckId={deckId}\r\n            setCards={setCards}\r\n            newCards={newCards}\r\n            setNewCards={setNewCards}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Switch>\r\n  ) : (\r\n    <div>\r\n      <NavLink exact to={`/`}>\r\n        Home\r\n      </NavLink>\r\n      /<p>Loading...</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Deck;\r\n","import React, { useState } from \"react\";\r\nimport { NavLink, useHistory} from \"react-router-dom\";\r\nimport { createDeck } from \"../utils/api\";\r\n\r\nfunction CreateDeck() {\r\n\r\n  // Creating \"blank\" form state for formData\r\n  const initialState = {\r\n    name: \"\",\r\n    message: \"\",\r\n  };\r\n  const [formData, setFormData] = useState(initialState);\r\n\r\n  const handleChange = (event) => {\r\n    setFormData({\r\n      ...formData,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const history = useHistory();\r\n\r\n  // Adds deck to deck, then takes the user to the new Deck screen upon Submit\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    createDeck(formData)\r\n      .then((result) => history.push(`/decks/${result.id}`));\r\n    };\r\n\r\n  return (\r\n    <div>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol class=\"breadcrumb\">\r\n          <li class=\"breadcrumb-item\">\r\n      <NavLink exact to={`/`}>\r\n        Home\r\n      </NavLink>\r\n      </li>\r\n      <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n      Create Deck\r\n      </li>\r\n      </ol>\r\n      </nav>\r\n      <h1>Create Deck</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"name\" style={{marginBottom:\"15px\"}}>\r\n          Deck Name:\r\n          <input type=\"text\" name=\"name\" id=\"name\" size=\"37\" onChange={handleChange}/>\r\n        </label>\r\n        <br />\r\n        <label htmlFor=\"description\">\r\n          Description:\r\n          <textarea\r\n            name=\"description\"\r\n            id=\"description\"\r\n            onChange={handleChange}\r\n            cols=\"40\"\r\n            rows=\"3\"\r\n          />\r\n        </label>\r\n        <br />\r\n        <button type=\"button\" class=\"btn btn-secondary\" style={{marginRight: \"10px\"}} onClick={() => history.push(\"/\")}>\r\n        Cancel\r\n        </button>\r\n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateDeck;\r\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"./Home\";\nimport Deck from \"./Deck\";\nimport CreateDeck from \"./CreateDeck\";\n\nfunction Layout() {\n  return (\n    <div>\n      <Header />\n      <div className=\"container\" >\n        <Switch>\n          <Route exact path=\"/decks/new\">\n            <CreateDeck />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            <Deck />\n          </Route>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route} from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      \n        <Route path=\"/\">\n          <Layout />\n        </Route>\n       \n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}